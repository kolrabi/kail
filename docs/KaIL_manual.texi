\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename kaIL_manual.info
@settitle kolrabi's another Image Library manual
@documentencoding UTF-8
@c %**end of header

@c QUITE IMPORTANT: This document is revision-controlled.
@c Revision-control systems operate on per-line basis, so they
@c will like if editors write using 'one sentence = one line' rule.

@c just some fancy stuff like VERSION and UPDATED generation
@c version.texi is generated automatically
@include version.texi

@copying
This is @code{kaIL @value{VERSION}} manual.
Last update is from @value{UPDATED}. 

Copyright @copyright{} 2008,2009 Denton Woods, Matěj Týč 

Copyright @copyright{} 2014 Björn Paetzel

Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU Free Documentation License''.
@end copying

@titlepage
@title kolrabi's another Image Library manual
@sp 1
@center @image{images/kail/logo,14.9cm}
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@c Output the table of contents at the beginning.
@contents

@node Top
@top IL manual
This is a manual describing IL part of @code{kaiIL} -- handling images.
@menu
* Introduction::     General intro
* Getting started::  How to write your first code
* Image management:: How to manage images :-)
* Error handling::   If you encounter an error...
* Image manipulation:: How to manipulate with images using ILU
* Common #defines::  #defines you are likely to come across when using DevIL
* Sample program::   If you want to get going quickly
* Functions index::  Index of IL and ILU functions
@end menu


@node Introduction
@chapter Introduction
@section General introduction

Developer's Image Library was previously called OpenIL, but due to trademark issues, @code{OpenIL} is now known as @code{DevIL}.
The Resiliant Image Library (@code{ResIL}) is a fork of @code{DevIL}.
From that @code{kaIL} was created.

@code{kaIL} is an Open Source programming library for programmers to incorporate into their own programs.
@code{kaIL} loads and saves a large variety of images for use in a software developer's program.
This library is capable of manipulating images in various ways and passing image information to display APIs, such as OpenGL and Direct3D.

The purpose of this manual is to guide users in coding with the Image Library.
This manual is for users proficient in C and with competent knowledge of the integrated development environment (IDE) or compiler they are using.
 
@section Thread safety

@code{KaIL} takes advantage of the multi threaded standard @code{LIBC} DLLs.
Some work was put into making @code{KaIL} thread safe.
Images that are currently being worked on are locked, so that other threads will block when they try to perform an operation on them. 
Global state of the Image Library (like which image is currently bound, the error state or general settings) is thread local.


@section Test suite
@code{kaIL} comes with a test suite. 
To run the tests, simply build the @code{test} target in the project (@code{ALL_TESTS} in Visual Studio).
The following tests will be run:
@itemize
  @item User supplied memory and file functions are tested and checked if they are called correctly.
	@item Sample images from the "images/" folder are loaded and checked for successful load, and correct dimensions. The content is not yet checked. 
	@item ILU filters are applied to a test image and saved for visual inspection.
@end itemize

@section Sample images

A number of sample images are provided for various image formats. These are used for testing the loading functions.

@node Getting started
@chapter Getting started

@section Obtaining kaIL
@subsection Precompiled binaries

TODO

@subsection Compiling from source

TODO:

@enumerate
  @item git
  @item website
  @item dependencies
  @item cmake
@end enumerate

@section Linking

@subsection Visual Studio

TODO

@subsection MinGW

TODO

@subsection XCode

TODO

@subsection CMake

TODO

@node Basic usage
@chapter Basic usage
@section Initializing kaIL

You must initialize @code{kaIL}, or it will most certainly crash.
You need to initialize each library (IL, ILU, and ILUT) separately.
You do not need to initialize libraries you are not using, but keep in mind that the higher level libraries are dependent on the lower ones.
For example, ILUT is dependent on ILU and IL, so you have to initialize IL and ILU as well.

@findex ilInit 
@subsection IL Initialization
Simply call the @code{ilInit} function with no parameters:

@example
// Initialize IL
ilInit();
@end example

@findex iluInit
@subsection ILU Initialization
Call the @code{iluInit} function with no parameters:

@example
// Initialize ILU
iluInit();
@end example

@findex ilutInit
@subsection ILUT Initialization
To initialize the ILUT with all available renderers, call the @code{ilutInit} function with no parameters:

@example
// Initialize ILUT
ilutInit();
@end example

@findex ilutRenderer

You can also use the function @code{ilutRenderer}.  
You must call @code{ilutRenderer} or @code{ilutInit} before you use any ILUT functions.
This function initializes ILUT support for the API you desire to use by a single parameter:

@itemize
	@item @code{ILUT_OPENGL} -- Initializes ILUT's OpenGL support.
	@item @code{ILUT_ALLEGRO} -- Initializes ILUT's Allegro support.
	@item @code{ILUT_WIN32} -- Initializes ILUT's Windows GDI and DirectX 8 support.
@end itemize

An example of using @code{ilutRenderer} follows:

@example
// Initialize ILUT with OpenGL support.
ilutRenderer(ILUT_OPENGL);
@end example

Of course the ILUT must be built with support for your chosen API on the platform you are running to use it.

@node Functions index
@unnumbered Functions index
@printindex fn
@bye

